import Control.Monad (foldM)
import qualified Data.Map.Strict as Map
import Data.Map.Strict (Map)

data Command = L
             | R
             | U
             | D
             | Print
  deriving (Eq, Show)

parse :: String -> [Command]
parse []         = []
parse ('L':rest) = L : parse rest
parse ('R':rest) = R : parse rest
parse ('U':rest) = U : parse rest
parse ('D':rest) = D : parse rest
parse ('\n':rest) = Print : parse rest
parse (' ':rest) = parse rest
parse s          = error ("Failed to parse: " ++ s)


type Dir = (Int, Int)
type Pos = (Int, Int)

origin :: Dir
origin = (0,0)

north, south, east, west :: Dir
north = (0,1)
south = (0,-1)
east = (1,0)
west = (-1,0)

adv :: KeyPad -> Dir -> Pos -> Pos
adv m (vx, vy) p@(x,y) =
  let p' = (x+vx, y+vy)
  in if validPos m p'
        then p'
        else p

cmdToDir :: Command -> Dir
cmdToDir L = west
cmdToDir R = east
cmdToDir U = north
cmdToDir D = south
cmdToDir Print = error "Can't convert 'Print' to a direction!"


-- Stuff that depends on keypad layout -----------------------------------------

type KeyPad = Map Pos Char

keyPad1 :: KeyPad
keyPad1 = toKeyPad (1,-1)
                   [ "123"
                   , "456"
                   , "789"
                   ]

keyPad2 :: KeyPad
keyPad2 = toKeyPad (0,-2)
                   [ "  1  "
                   , " 234 "
                   , "56789"
                   , " ABC "
                   , "  D  "
                   ]

toKeyPad :: Pos -> [String] -> KeyPad
toKeyPad (ox,oy) rs = Map.fromList normed
  where
    m = concatMap (\(j, s) -> map (\(i, c) -> ((i,j),c)) (zip [0,1..] s)) (zip [0,-1..] rs)
    normed = map (\((x,y), c) -> ((x-ox,y-oy), c)) m

validPos :: KeyPad -> Pos -> Bool
validPos m p = case Map.lookup p m of
                 Nothing -> False
                 Just ' ' -> False
                 _        -> True

posToKey :: KeyPad -> Pos -> Char
posToKey m p = case Map.lookup p m of
                 Nothing -> error ("key lookup failed at: " ++ show p)
                 Just c  -> c

-- Executing commands ----------------------------------------------------------

action :: KeyPad -> Pos -> Command -> IO Pos
action m p Print = putStrLn ("Press " ++ show (posToKey m p)) >> return p
action m p c = return $ adv m (cmdToDir c) p

follow :: KeyPad -> [Command] -> IO Pos
follow m = foldM (action m) origin


-- Problem Data ----------------------------------------------------------------

testInput1 = "ULL\nRRDDD\nLURDL\nUUUUD\n"

input = "LDUDDRUDRRURRRRDRUUDULDLULRRLLLUDDULRDLDDLRULLDDLRUURRLDUDDDDLUULUUDDDDLLLLLULLRURDRLRLRLLURDLLDDUULUUUUDLULLRLUUDDLRDRRURRLURRLLLRRDLRUDURRLRRRLULRDLUDRDRLUDDUUULDDDDDURLDULLRDDRRUDDDDRRURRULUDDLLRRDRURDLLLLLUUUDLULURLULLDRLRRDDLUDURUDRLRURURLRRDDLDUULURULRRLLLDRURDULRDUURRRLDLDUDDRLURRDRDRRLDLRRRLRURDRLDRUDLURRUURDLDRULULURRLDLLLUURRULUDDDRLDDUDDDRRLRDUDRUUDDULRDDULDDURULUDLUDRUDDDLRRRRRDLULDRLRRRRUULDUUDRRLURDLLUUDUDDDLUUURDRUULRURULRLLDDLLUDLURRLDRLDDDLULULLURLULRDLDRDDDLRDUDUURUUULDLLRDRUDRDURUUDDLRRRRLLLUULURRURLLDDLDDD\nDRURURLLUURRRULURRLRULLLURDULRLRRRLRUURRLRRURRRRUURRRLUDRDUDLUUDULURRLDLULURRLDURLUUDLDUDRUURDDRDLLLDDRDDLUUDRDUDDRRDLDUDRLDDDRLLDDLUDRULRLLURLDLURRDRUDUDLDLULLLRDLLRRDULLDRURRDLDRURDURDULUUURURDLUDRRURLRRLDULRRDURRDRDDULLDRRRLDRRURRRRUURDRLLLRRULLUDUDRRDDRURLULLUUDDRLDRRDUDLULUUDRDDDDLRLRULRLRLLDLLRRDDLDRDURRULLRLRRLULRULDDDRDRULDRUUDURDLLRDRURDRLRDDUDLLRUDLURURRULLUDRDRDURLLLDDDRDRURRDDRLRRRDLLDDLDURUULURULRLULRLLURLUDULDRRDDLRDLRRLRLLULLDDDRDRU\nURUUDUDRDDRDRRRDLLUDRUDRUUUURDRRDUDUULDUDLLUDRRUDLLRDLLULULDRRDDULDRLDLDDULLDDRDDDLRLLDLLRDUUDUURLUDURDRRRRLRRLDRRUULLDLDLRDURULRURULRRDRRDDUUURDURLLDDUUDLRLDURULURRRDRRUUUDRDDLRLRRLLULUDDRRLRRRRLRDRUDDUULULRRURUURURRLRUDLRRUUURUULLULULRRDDULDRRLLLDLUDRRRLLRDLLRLDUDDRRULULUDLURLDRDRRLULLRRDRDLUURLDDURRLDRLURULDLDRDLURRDRLUUDRUULLDRDURLLDLRUDDULLLLDLDDDLURDDUDUDDRLRDDUDDURURLULLRLUDRDDUDDLDRUURLDLUUURDUULRULLDDDURULDDLLD\nLRRLLRURUURRDLURRULDDDLURDUURLLDLRRRRULUUDDLULLDLLRDLUDUULLUDRLLDRULDDURURDUUULRUDRLLRDDDURLRDRRURDDRUDDRRULULLLDLRLULLDLLDRLLLUDLRURLDULRDDRDLDRRDLUUDDLURDLURLUDLRDLDUURLRRUULDLURULUURULLURLDDURRURDRLUULLRRLLLDDDURLURUURLLLLDLLLUDLDLRDULUULRRLUUUUDLURRURRULULULRURDDRRRRDRUDRURDUDDDDUDLURURRDRRDRUDRLDLDDDLURRRURRUDLDURDRLDLDLDDUDURLUDUUDRULLRLLUUDDUURRRUDURDRRUURLUDRRUDLUDDRUUDLULDLLDLRUUDUULLDULRRLDRUDRRDRLUUDDRUDDLLULRLULLDLDUULLDRUUDDUDLLLLDLDDLDLURLDLRUUDDUULLUDUUDRUDLRDDRDLDRUUDUDLLDUURRRLLLLRLLRLLRLUUDULLRLURDLLRUUDRULLULRDRDRRULRDLUDDURRRRURLLRDRLLDRUUULDUDDLRDRD\nDDLRRULRDURDURULLLLRLDDRDDRLLURLRDLULUDURRLUDLDUDRDULDDULURDRURLLDRRLDURRLUULLRUUDUUDLDDLRUUDRRDDRLURDRUDRRRDRUUDDRLLUURLURUDLLRRDRDLUUDLUDURUUDDUULUURLUDLLDDULLUURDDRDLLDRLLDDDRRDLDULLURRLDLRRRLRRURUUDRLURURUULDURUDRRLUDUDLRUDDUDDRLLLULUDULRURDRLUURRRRDLLRDRURRRUURULRUDULDULULUULULLURDUDUDRLDULDRDDULRULDLURLRLDDDDDDULDRURRRRDLLRUDDRDDLUUDUDDRLLRLDLUDRUDULDDDRLLLLURURLDLUUULRRRUDLLULUUULLDLRLDLLRLRDLDULLRLUDDDRDRDDLULUUR\n"

-- Answers ---------------------------------------------------------------------

-- Part 1:
ans1 = follow keyPad1 (parse input)

-- Part 2:
ans2 = follow keyPad2 (parse input)

